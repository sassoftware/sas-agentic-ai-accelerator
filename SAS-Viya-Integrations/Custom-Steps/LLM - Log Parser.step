{"creationTimeStamp":"2025-05-29T07:47:11.127Z","modifiedTimeStamp":"2025-05-29T10:02:42.349Z","createdBy":"gerdaw","modifiedBy":"gerdaw","name":"LLM - Log Parser.step","displayName":"LLM - Log Parser.step","localDisplayName":"LLM - Log Parser.step","description":"This step is part of the SAS LLM Use Case Framework and provides the ability to parse the logs that are created by the SCR containers and make the information available as a CAS table.","localDescription":"This step is part of the SAS LLM Use Case Framework and provides the ability to parse the logs that are created by the SCR containers and make the information available as a CAS table.","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c/copy","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","uri":"/dataFlows/steps/2a1c249c-c9da-446c-a0e6-388419832a1c","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"_log_target_table","displayName":"_log_target_table","localDisplayName":"_log_target_table","description":"Parsed logs from the LLM containers of the SAS LLM Use Case framework","localDescription":"Parsed logs from the LLM containers of the SAS LLM Use Case framework","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","columnDelta":{"updateColumnArguments":["_log_timestamp","_log_model","_log_sys_prompt","_log_usr_prompt","_log_temp","_log_max_tok","_log_top_p","_log_top_k","_log_prompt_len","_log_output_len","_log_run_time","_log_response"]},"supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"pageOptions\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_info\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"This step requires as an input a log file produced by the LLM containers. The log file has to be located on the SAS Server and NOT in SAS Content.\\n\\nFor your output table you have to connect a CAS table and you can choose below if you want to append, prompte and/or save the table.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_path\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select the LLM log file to be parsed:\",\n\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\"placeholder\": \"/export/pvs/llm/llm.log\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_target_table\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Select the output CAS table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_append_table\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Append new rows to existing table\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_promote_table\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Promote the table to global scope\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_save_table\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Save the table\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_log_outputDefinition\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output table metadata structure\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t],\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_timestamp\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Timestamp:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_model\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Model name:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_sys_prompt\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"System prompt:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_usr_prompt\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"User prompt:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_temp\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Temperature:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_top_p\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Top P:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_top_k\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Top K:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_max_tok\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Max tokens:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_prompt_len\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Prompt length:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_output_len\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Output length:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_run_time\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Run time:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_log_response\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Response:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pageAbout\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"textAbout\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"LLM - Log Parser step\\n==========\\n\\nThe \\\"LLM - Log Parser\\\" custom steps parses the log from the LLM containers deployed via the SAS LLM Use Case framework.\\n\\nThis step requires as an input a log file produced by the LLM containers. The log file has to be located on the SAS Server and NOT in SAS Content.\\n\\nFor your output table you have to connect a CAS table and you can choose below if you want to append, prompte and/or save the table.\\n\\nThis step requires Proc Python and that the Pandas and SWAT packages are installed.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionPrereqs\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textPrereqs\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Pre-requisites:\\n- Tested on Viya version Stable 2025.05.\\n- Access to Proc Python\\n- Python needs to have the Pandas and SWAT packages installed\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionDocumentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textDocumentation\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* proc Python in SAS Viya Platform Programming documentation (https://go.documentation.sas.com/doc/cs/pgmsascdc/default/proc/p0sj9pq2ryjlphn1ceq7ntpc1ipp.htm)\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionChangelog\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textChangelog\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version: 2.0 (29MAY2025)\\n     - Moved log parsing to Python\\n* Version: 1.0 (02DEC2024)\\n      - Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"_log_path\": \"\",\n\t\t\"_log_target_table\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_log_append_table\": false,\n\t\t\"_log_promote_table\": false,\n\t\t\"_log_save_table\": false,\n\t\t\"_log_timestamp\": {\n\t\t\t\"value\": \"timestamp\",\n\t\t\t\"label\": \"The datetime of the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8,\n\t\t\t\"format\": \"datetime20.\"\n\t\t},\n\t\t\"_log_model\": {\n\t\t\t\"value\": \"llm\",\n\t\t\t\"label\": \"The name of the model used\"\n\t\t},\n\t\t\"_log_sys_prompt\": {\n\t\t\t\"value\": \"systemPrompt\",\n\t\t\t\"label\": \"The system prompt used by the request\"\n\t\t},\n\t\t\"_log_usr_prompt\": {\n\t\t\t\"value\": \"userPrompt\",\n\t\t\t\"label\": \"The user prompt used by the request\"\n\t\t},\n\t\t\"_log_temp\": {\n\t\t\t\"value\": \"temperature\",\n\t\t\t\"label\": \"The setting of temperature. Missing means it was not present in the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_top_p\": {\n\t\t\t\"value\": \"top_p\",\n\t\t\t\"label\": \"The setting of top p. Missing means it was not present in the request\",\n\t\t\t\"length\": 8,\n\t\t\t\"type\": \"n\"\n\t\t},\n\t\t\"_log_top_k\": {\n\t\t\t\"value\": \"top_k\",\n\t\t\t\"label\": \"The setting of top k. Missing means it was not present in the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_max_tok\": {\n\t\t\t\"value\": \"max_tokens\",\n\t\t\t\"label\": \"The setting of max new tokens. Missing means it was not present in the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_prompt_len\": {\n\t\t\t\"value\": \"prompt_length\",\n\t\t\t\"label\": \"The amount of input tokens in the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_output_len\": {\n\t\t\t\"value\": \"output_length\",\n\t\t\t\"label\": \"The amount of output tokens in the request\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_run_time\": {\n\t\t\t\"value\": \"run_time\",\n\t\t\t\"label\": \"The time for the model to generate the response in seconds\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t},\n\t\t\"_log_response\": {\n\t\t\t\"value\": \"response\",\n\t\t\t\"label\": \"The response of the model to the users request\"\n\t\t}\n\t}\n}","templates":{"SAS":"* Check if the file is located on the SAS Server, if so extract the path;\ndata _null_;\n   locationType = scan(\"&_log_path.\", 1, ':');\n   if lowCase(locationType) ne 'sasserver' then do;\n      putLog 'ERROR: For this step to run please ensure the the selected file is located on the SAS Server.';\n      abort 10;\n   end;\n   else do;\n        call symputx('_log_path', scan(\"&_log_path.\", 2, ':', 'MO'));\n   end;\nrun;\n\n* Ensure that the output table is in CAS;\n%if &_log_target_table_engine. NE CAS %then %do;\n    data _null_;\n        putlog \"ERROR: The table &_log_target_table. is not a CAS table.\";\n        putlog 'ERROR: In order for this step to run your target table needs to be in CAS';\n        abort 62;\n    run;\n%end;\n \n* Get the caslib name of the libname;\nproc sql noPrint;\n    select sysvalue into :_log_target_table_lib trimmed\n        from dictionary.libnames\n            where libname = upcase(\"&_log_target_table_lib.\") and upcase(sysname) = 'CASLIB';\nquit;\n\n* Check if a CAS session exists;\n%if %symexist(_CASNAME_) EQ 0 %then %do;\n    %let _log_clean_cas_session = 1;\n    cas llmLogMySess;\n%end;\n%else %do;\n    %let _log_clean_cas_session = 0;\n%end;\n\nproc cas;\n    session.sessionId result = sessresults;\n    call symputx('_casSessionUUID', sessresults[1]);\nquit;\n\nproc python restart;\nsubmit;\nimport re\nimport os\nimport ast\nfrom datetime import datetime\ntry:\n    import swat\n    import pandas as pd\nexcept ImportError:\n    SAS.logMessage('Ensure that the SWAT and Pandas package are installed', messageType='ERROR')\n\n#  Add certificate location to operating system list of trusted certs\nos.environ['CAS_CLIENT_SSL_CA_LIST'] = os.environ['SSLCALISTLOC']\n\n# Connect to CAS\nconn = swat.CAS(hostname=SAS.sasfnc('getoption', 'cashost'), port=SAS.sasfnc('getoption', 'casport'), password=os.environ['SAS_SERVICES_TOKEN'], session=SAS.symget('_casSessionUUID'))\n\ndef parse_log_file(file_path):\n    \"\"\"\n    Parses a structured application log file containing LLM request and response blocks.\n\n    Extracts relevant data including:\n    - Timestamp of the request\n    - The model used for the request\n    - System and user prompts\n    - Model options (temperature, top_p, top_k, max_tokens)\n    - Prompt and output lengths\n    - Runtime in seconds\n    - Multiline model response\n\n    Each request block starts with 'Request: POST' and ends before the next such line.\n    \n    Args:\n        file_path (str): Path to the log file to parse.\n\n    Returns:\n        pandas.DataFrame: A DataFrame containing one row per request with extracted fields.\n    \"\"\"\n    with open(file_path, 'r', encoding='utf-8') as f:\n        lines = f.readlines()\n\n    records = []\n    i = 0\n    while i < len(lines):\n        if 'Request: POST' in lines[i]:\n            entry = {\n                \"timestamp\": None,\n                \"model\": None,\n                \"system_prompt\": None,\n                \"user_prompt\": None,\n                \"temperature\": None,\n                \"top_p\": None,\n                \"top_k\": None,\n                \"max_tokens\": None,\n                \"prompt_length\": None,\n                \"output_length\": None,\n                \"runtime\": None,\n                \"response\": None\n            }\n\n            entry[\"timestamp\"] = lines[i].split(' - ')[0].strip()\n            match_endpoint = re.search(r'Request: POST\\s+(.+)', lines[i])\n            if match_endpoint:\n                entry[\"model\"] = match_endpoint.group(1).strip().strip('/')\n            i += 1\n\n            response_lines = []\n            while i < len(lines) and 'Request: POST' not in lines[i]:\n                if 'Request Data:' in lines[i]:\n                    try:\n                        request_data_str = lines[i].split('Request Data: ')[-1].strip()\n                        request_data_dict = ast.literal_eval(request_data_str)\n                        for item in request_data_dict.get('inputs', []):\n                            if item['name'] == 'systemPrompt':\n                                entry['system_prompt'] = item['value']\n                            elif item['name'] == 'userPrompt':\n                                entry['user_prompt'] = item['value']\n                            elif item['name'] == 'options':\n                                options_str = item['value'].strip()\n                                if options_str.startswith('{') and options_str.endswith('}'):\n                                    options_str = options_str[1:-1]  # Remove surrounding {}\n                                for opt in options_str.split(','):\n                                    if ':' in opt:\n                                        key, val = opt.split(':', 1)\n                                        key = key.strip()\n                                        val = val.strip()\n                                        if key in ['temperature', 'top_p', 'top_k', 'max_tokens']:\n                                            entry[key] = val\n                    except (ValueError, SyntaxError):\n                        pass\n                elif 'prompt_length:' in lines[i]:\n                    entry[\"prompt_length\"] = int(re.search(r'prompt_length:\\s*(\\d+)', lines[i]).group(1))\n                elif 'output_length:' in lines[i]:\n                    entry[\"output_length\"] = int(re.search(r'output_length:\\s*(\\d+)', lines[i]).group(1))\n                elif 'run_time:' in lines[i]:\n                    entry[\"runtime\"] = float(re.search(r'run_time:\\s*([\\d\\.]+)', lines[i]).group(1))\n                elif 'response:' in lines[i]:\n                    response_line = lines[i].split('response: ', 1)[-1].strip()\n                    response_lines.append(response_line)\n                    i += 1\n                    while i < len(lines) and not re.match(r'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}', lines[i]):\n                        response_lines.append(lines[i].strip())\n                        i += 1\n                    entry[\"response\"] = ' '.join(response_lines)\n                    continue\n                i += 1\n\n            records.append(entry)\n        else:\n            i += 1\n\n    df = pd.DataFrame(records)\n    return df\n\ndf = parse_log_file(SAS.symget('_log_path'))\n\n# Ensure the timestamp is suited for SAS\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\nsas_epoch = datetime(1960, 1, 1)\ndf['timestamp'] = (df['timestamp'] - sas_epoch).dt.total_seconds()\n\n# Ensure that numeric values are correct\nnumeric_columns = ['temperature', 'top_p', 'top_k', 'max_tokens', 'prompt_length', 'output_length', 'runtime']\nfor col in numeric_columns:\n    df[col] = pd.to_numeric(df[col], errors='coerce')\n\n# Add column labels\nlabels = {\n    'timestamp': 'The datetime of the request',\n    'model': 'The name of the model used',\n    'system_prompt': 'The system prompt used by the request',\n    'user_prompt': 'The user prompt used by the request',\n    'temperature': 'The setting of temperature. Missing means it was not present in the request',\n    'top_p': 'The setting of top p. Missing means it was not present in the request',\n    'top_k': 'The setting of top k. Missing means it was not present in the request',\n    'max_tokens': 'The setting of max new tokens. Missing means it was not present in the request',\n    'prompt_length': 'The amount of input tokens in the request',\n    'output_length': 'The amount of output tokens in the request',\n    'runtime': 'The time for the model to generate the response in seconds',\n    'response': 'The response of the model to the users request'\n}\n\n# Set the format to display the timestamp correctly\nsas_formats = {\n    'timestamp': 'DATETIME20.'\n}\n\nvars_metadata = []\nfor col in df.columns:\n    var = {\n        'name': col,\n        'label': labels.get(col, col)\n    }\n    if col in sas_formats:\n        var['format'] = sas_formats[col]\n    vars_metadata.append(var)\n\n# Upload to the casuser and then return to SAS\ntbl = conn.upload_frame(\n    df,\n    casout=dict(\n        name='_TEMP_LLM_LOGS',\n        caslib='CASUSER',\n        label='Extracted LLM Log Data'\n    ),\n    importoptions={'vars': vars_metadata}\n)\nendsubmit;\nrun; quit;\n\nproc python terminate;\nrun; quit;\n\n* Append, Replace, Copy and/or promote to CAS;\n%macro _log_handle_output_table;\n    proc cas;\n        table.tableExists result=re /\n            casLib = \"&_log_target_table_lib.\",\n            name = \"&_log_target_table_name.\";\n\n        %if &_log_append_table. %then %do;\n            if re.exists GE 1 then do;\n                table.append /\n                    source = {casLib = 'CASUSER', name = '_TEMP_LLM_LOGS'},\n                    target = {casLib = \"&_log_target_table_lib.\", name = \"&_log_target_table_name.\"};\n            end;\n            else do;\n                table.copyTable /\n                    table = {casLib = 'CASUSER', name = '_TEMP_LLM_LOGS'},\n                    casOut = {casLib = \"&_log_target_table_lib.\", name = \"&_log_target_table_name.\"};\n            end;\n        %end;\n        %else %do;\n            if re.exists EQ 2 then do;\n                table.dropTable /\n                    casLib = \"&_log_target_table_lib.\",\n                    name = \"&_log_target_table_name.\",\n                    quiet = True;\n            end;\n            \n            table.copyTable /\n                table = {casLib = 'CASUSER', name = '_TEMP_LLM_LOGS'},\n                casOut = {casLib = \"&_log_target_table_lib.\", name = \"&_log_target_table_name.\"};\n            \n            %if &_log_promote_table. %then %do;\n                table.promote /\n                    casLib = \"&_log_target_table_lib.\",\n                    name = \"&_log_target_table_name.\",\n                    targetLib = \"&_log_target_table_lib.\",\n                    target = \"&_log_target_table_name.\",\n                    quiet = True;\n            %end;\n        %end;\n\n        %if &_log_promote_table. %then %do;\n            if re.exists LE 1 then do;\n                table.promote /\n                    casLib = \"&_log_target_table_lib.\",\n                    name = \"&_log_target_table_name.\",\n                    targetLib = \"&_log_target_table_lib.\",\n                    target = \"&_log_target_table_name.\",\n                    quiet = True;\n            end;\n        %end;\n\n        %if &_log_save_table. %then %do;\n            table.save /\n                table = {casLib = \"&_log_target_table_lib.\", name = \"&_log_target_table_name.\"},\n                casLib = \"&_log_target_table_lib.\",\n                name = \"&_log_target_table_name.\",\n                replace = True;\n        %end;\n\n        table.dropTable /\n                casLib = 'CASUSER',\n                table = '_TEMP_LLM_LOGS',\n                quiet = True;\n    run; quit;\n%mend _log_handle_output_table;\n\n%_log_handle_output_table;\n\n* Clean up;\n%if &_log_clean_cas_session. %then %do;\n    cas llmLogMySess terminate;\n%end;\n%sysmacdelete _log_handle_output_table;\n%symdel _log_clean_cas_session _casSessionUUID;"}}